#!/usr/bin/env perl
use 5.026;
use strict;
use warnings;
use Carp;

use Mojo::File qw(curfile path);
#  messy but otherwise the exe files don't work from arbitrary locations
use if !$ENV{PAR_0}, 'lib', eval {curfile->dirname->sibling('lib')->to_string};
use Mojolicious::Commands;

#  temporary - we need Biodiverse to be installed or in PERL5LIB
#  use lib curfile->dirname->dirname->dirname->dirname->child('biodiverse/lib')->to_string;
#say STDERR curfile->dirname->dirname->dirname->dirname->child('biodiverse/lib')->to_string;

# Start command line interface for application
Mojolicious::Commands->start_app('BiodiverseR');


#  need this for the pp build to work (all of it?)
#  largely cargo-culted from Biodiverse::Config
if ($ENV{BDV_PP_BUILDING}) {
    use utf8;
    say 'Building pp file';
    say "using $0";
    use File::BOM qw / :subs /;          #  we need File::BOM.
    open my $fh, '<:via(File::BOM)', $0  #  just read ourselves
      or croak "Cannot open $0 via File::BOM\n";
    $fh->close;
    
    #  more File::BOM issues
    require encoding;

    #  exercise the unicode regexp matching - needed for the spatial conditions
    use 5.016;
    use feature 'unicode_strings';
    my $string = "sp_self_only () and \N{WHITE SMILING FACE}";
    $string =~ /\bsp_self_only\b/;
    
    #  load extra encode pages, except the extended ones (for now)
    #  https://metacpan.org/pod/distribution/Encode/lib/Encode/Supported.pod#CJK:-Chinese-Japanese-Korean-Multibyte
    use Encode::CN;
    use Encode::JP;
    use Encode::KR;
    use Encode::TW;
    
    #  Big stuff needs loading (poss not any more with PAR>1.08)
    use Math::BigInt;
    
    use Alien::gdal ();
    use Alien::geos::af ();
    use Alien::proj ();
    use Alien::sqlite ();
    #eval 'use Alien::spatialite';  #  might not have this one
    #eval 'use Alien::freexl';      #  might not have this one

    #  these are here for PAR purposes to ensure they get packed
    #  Spreadsheet::Read calls them as needed
    #  (not sure we need all of them, though)
    use Spreadsheet::ParseODS 0.27;
    use Spreadsheet::ReadSXC;
    use Spreadsheet::ParseExcel;
    use Spreadsheet::ParseXLSX;
    use PerlIO::gzip;  #  used by ParseODS

    #  GUI needs this for help,
    #  so don't trigger for engine-only
    eval 'use IO::Socket::SSL';
    
    use FFI::Platypus;
}
